# Generated by Django 3.0.7 on 2020-08-12 17:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ticketvise.models.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('lti_id', models.CharField(max_length=150, null=True, verbose_name='LTI user ID')),
                ('avatar_url', models.URLField(default='/static/img/avatars/default-avatar.png')),
                ('notification_mention_mail', models.BooleanField(default=True, verbose_name='Receive mail mention')),
                ('notification_mention_app', models.BooleanField(default=True, verbose_name='Receive in-app mention notification')),
                ('notification_ticket_status_change_mail', models.BooleanField(default=True, verbose_name='Receive mail after ticket status change')),
                ('notification_ticket_status_change_app', models.BooleanField(default=True, verbose_name='Receive in-app ticket status change notification')),
                ('notification_new_ticket_mail', models.BooleanField(default=True, verbose_name='Receive mail after new_ticket')),
                ('notification_new_ticket_app', models.BooleanField(default=True, verbose_name='Receive in-app new_ticket notification')),
                ('notification_comment_mail', models.BooleanField(default=True, verbose_name='Receive mail after comment')),
                ('notification_comment_app', models.BooleanField(default=True, verbose_name='Receive in-app comment notification')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Inbox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('color', models.CharField(max_length=7, validators=[ticketvise.models.validators.validate_hex_color])),
                ('image', models.ImageField(default='/static/img/inboxes/default-inbox.png', upload_to='media/img/inboxes')),
                ('scheduling_algorithm', models.CharField(choices=[('round-robin', 'Round Robin'), ('least-assigned-first', 'Least Assigned First'), ('manual', 'Manual')], default='least-assigned-first', max_length=255)),
                ('round_robin_parameter', models.PositiveIntegerField(default=0)),
                ('visibility_assignee', models.BooleanField(default=False)),
                ('close_answered_weeks', models.PositiveIntegerField(default=0)),
                ('alert_coordinator_unanswered_days', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(default='#ff0000', max_length=7, validators=[ticketvise.models.validators.validate_hex_color])),
                ('name', models.CharField(default='', max_length=50)),
                ('is_form_label', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('inbox', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='ticketvise.Inbox')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read', models.BooleanField(default=False, verbose_name='Read')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('ticket_inbox_id', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('PNDG', 'Pending'), ('ASGD', 'Assigned'), ('ANSD', 'Answered'), ('CLSD', 'Closed')], default='PNDG', max_length=8)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_edited', models.DateTimeField(auto_now=True, null=True, verbose_name='Date edited')),
                ('content', models.TextField()),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignee', to=settings.AUTH_USER_MODEL)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('inbox', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='ticketvise.Inbox')),
            ],
        ),
        migrations.CreateModel(
            name='TicketEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('initiator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketvise.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='TicketStatusEvent',
            fields=[
                ('ticketevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.TicketEvent')),
                ('status', models.CharField(choices=[('PNDG', 'Pending'), ('ASGD', 'Assigned'), ('ANSD', 'Answered'), ('CLSD', 'Closed')], max_length=8)),
            ],
            bases=('ticketvise.ticketevent',),
        ),
        migrations.CreateModel(
            name='TicketTitleEvent',
            fields=[
                ('ticketevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.TicketEvent')),
                ('old_title', models.CharField(max_length=100)),
                ('new_title', models.CharField(max_length=100)),
            ],
            bases=('ticketvise.ticketevent',),
        ),
        migrations.CreateModel(
            name='UserInbox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('GUEST', 'Student'), ('AGENT', 'Teaching Assistant'), ('MANAGER', 'Coordinator')], default='GUEST', max_length=40)),
                ('is_bookmarked', models.BooleanField(default=False, help_text='Designates if the inbox is bookmarked by the user', verbose_name='bookmarked')),
                ('inbox', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_relationship', to='ticketvise.Inbox')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbox_relationship', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'inbox')},
            },
        ),
        migrations.CreateModel(
            name='TicketLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_edited', models.DateTimeField(auto_now=True, null=True, verbose_name='Date edited')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketvise.Label')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketvise.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='TicketAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='media/tickets')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='ticketvise.Ticket')),
            ],
        ),
        migrations.AddField(
            model_name='ticket',
            name='labels',
            field=models.ManyToManyField(blank=True, related_name='tickets', through='ticketvise.TicketLabel', to='ticketvise.Label'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='shared_with',
            field=models.ManyToManyField(blank=True, related_name='participants', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_edited', models.DateTimeField(auto_now=True, null=True, verbose_name='Date edited')),
                ('content', models.TextField()),
                ('is_reply', models.BooleanField(default=False, verbose_name='Is reply')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='ticketvise.Ticket')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='inboxes',
            field=models.ManyToManyField(related_name='users', through='ticketvise.UserInbox', to='ticketvise.Inbox'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='TicketStatusChangedNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.Notification')),
                ('old_status', models.CharField(choices=[('PNDG', 'Pending'), ('ASGD', 'Assigned'), ('ANSD', 'Answered'), ('CLSD', 'Closed')], max_length=8, null=True)),
                ('new_status', models.CharField(choices=[('PNDG', 'Pending'), ('ASGD', 'Assigned'), ('ANSD', 'Answered'), ('CLSD', 'Closed')], max_length=8)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_notifications', to='ticketvise.Ticket')),
            ],
            bases=('ticketvise.notification',),
        ),
        migrations.CreateModel(
            name='TicketLabelEvent',
            fields=[
                ('ticketevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.TicketEvent')),
                ('is_added', models.BooleanField()),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketvise.Label')),
            ],
            bases=('ticketvise.ticketevent',),
        ),
        migrations.CreateModel(
            name='TicketAssigneeEvent',
            fields=[
                ('ticketevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.TicketEvent')),
                ('assignee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('ticketvise.ticketevent',),
        ),
        migrations.AlterUniqueTogether(
            name='ticket',
            unique_together={('ticket_inbox_id', 'inbox')},
        ),
        migrations.CreateModel(
            name='MentionNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.Notification')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mention_notifications', to='ticketvise.Comment')),
            ],
            bases=('ticketvise.notification',),
        ),
        migrations.CreateModel(
            name='CommentNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.Notification')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_notifications', to='ticketvise.Comment')),
            ],
            bases=('ticketvise.notification',),
        ),
    ]
