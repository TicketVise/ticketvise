# Generated by Django 3.0.7 on 2020-08-04 09:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ticketvise.models.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('lti_id', models.CharField(max_length=150, null=True, verbose_name='LTI user ID')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('avatar_url', models.URLField(default='/static/img/avatars/default-avatar.png')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('notification_mention_mail', models.BooleanField(default=True, verbose_name='Receive mail mention')),
                ('notification_mention_app', models.BooleanField(default=True, verbose_name='Receive in-app mention notification')),
                ('notification_ticket_status_change_mail', models.BooleanField(default=True, verbose_name='Receive mail after ticket status change')),
                ('notification_ticket_status_change_app', models.BooleanField(default=True, verbose_name='Receive in-app ticket status change notification')),
                ('notification_new_ticket_mail', models.BooleanField(default=True, verbose_name='Receive mail after new_ticket')),
                ('notification_new_ticket_app', models.BooleanField(default=True, verbose_name='Receive in-app new_ticket notification')),
                ('notification_comment_mail', models.BooleanField(default=True, verbose_name='Receive mail after comment')),
                ('notification_comment_app', models.BooleanField(default=True, verbose_name='Receive in-app comment notification')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Course Code')),
                ('name', models.CharField(max_length=100, verbose_name='Course Name')),
                ('color', models.CharField(max_length=7, validators=[ticketvise.models.validators.validate_hex_color])),
                ('image', models.ImageField(default='/static/img/courses/default-course.png', upload_to='media/img/courses')),
                ('scheduling_algorithm', models.CharField(choices=[('round-robin', 'Round Robin'), ('least-assigned-first', 'Least Assigned First'), ('manual', 'Manual')], default='least-assigned-first', max_length=255)),
                ('round_robin_parameter', models.PositiveIntegerField(default=0)),
                ('visibility_assignee', models.BooleanField(default=False, verbose_name='Show assignee on student ticket overview')),
                ('close_answered_weeks', models.PositiveIntegerField(default=0)),
                ('alert_coordinator_unanswered_days', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(default='#ff0000', max_length=7, validators=[ticketvise.models.validators.validate_hex_color])),
                ('name', models.CharField(default='', max_length=50)),
                ('is_form_label', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='ticketvise.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read', models.BooleanField(default=False, verbose_name='Read')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('ticket_course_id', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('PNDG', 'Pending'), ('ASGD', 'Assigned'), ('ANSD', 'Answered'), ('CLSD', 'Closed')], default='PNDG', max_length=8)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_edited', models.DateTimeField(auto_now=True, null=True, verbose_name='Date edited')),
                ('content', models.TextField()),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignee', to=settings.AUTH_USER_MODEL)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='ticketvise.Course')),
                ('labels', models.ManyToManyField(blank=True, related_name='tickets', to='ticketvise.Label')),
            ],
            options={
                'unique_together': {('ticket_course_id', 'course')},
            },
        ),
        migrations.CreateModel(
            name='UserCourseRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Student', 'Student'), ('Assistant', 'Assistant'), ('Coordinator', 'Coordinator')], default='Student', max_length=40)),
                ('is_bookmarked', models.BooleanField(default=False, help_text='Designates if the course is bookmarked by the user', verbose_name='bookmarked')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_relationship', to='ticketvise.Course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_relationship', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'course')},
            },
        ),
        migrations.CreateModel(
            name='TicketAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='media/tickets')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='ticketvise.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_edited', models.DateTimeField(auto_now=True, null=True, verbose_name='Date edited')),
                ('content', models.TextField()),
                ('is_reply', models.BooleanField(default=False, verbose_name='Is reply')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='ticketvise.Ticket')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='courses',
            field=models.ManyToManyField(related_name='users', through='ticketvise.UserCourseRelationship', to='ticketvise.Course'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='TicketStatusChangedNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.Notification')),
                ('old_status', models.CharField(choices=[('PNDG', 'Pending'), ('ASGD', 'Assigned'), ('ANSD', 'Answered'), ('CLSD', 'Closed')], max_length=8, null=True)),
                ('new_status', models.CharField(choices=[('PNDG', 'Pending'), ('ASGD', 'Assigned'), ('ANSD', 'Answered'), ('CLSD', 'Closed')], max_length=8)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_notifications', to='ticketvise.Ticket')),
            ],
            bases=('ticketvise.notification',),
        ),
        migrations.CreateModel(
            name='MentionNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.Notification')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mention_notifications', to='ticketvise.Comment')),
            ],
            bases=('ticketvise.notification',),
        ),
        migrations.CreateModel(
            name='CommentNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketvise.Notification')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_notifications', to='ticketvise.Comment')),
            ],
            bases=('ticketvise.notification',),
        ),
    ]
