# Generated by Django 3.0.7 on 2020-08-04 14:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import ticketvise.models.validators


class Migration(migrations.Migration):

    dependencies = [
        ('ticketvise', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Inbox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('color', models.CharField(max_length=7, validators=[ticketvise.models.validators.validate_hex_color])),
                ('image', models.ImageField(default='static/img/inboxes/default-inbox.png', upload_to='media/img/inboxes')),
                ('scheduling_algorithm', models.CharField(choices=[('round-robin', 'Round Robin'), ('least-assigned-first', 'Least Assigned First'), ('manual', 'Manual')], default='least-assigned-first', max_length=255)),
                ('round_robin_parameter', models.PositiveIntegerField(default=0)),
                ('visibility_assignee', models.BooleanField(default=False)),
                ('close_answered_weeks', models.PositiveIntegerField(default=0)),
                ('alert_coordinator_unanswered_days', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserInbox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Student', 'Student'), ('Assistant', 'Assistant'), ('Coordinator', 'Coordinator')], default='Student', max_length=40)),
                ('is_bookmarked', models.BooleanField(default=False, help_text='Designates if the inbox is bookmarked by the user', verbose_name='bookmarked')),
                ('inbox', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_relationship', to='ticketvise.Inbox')),
            ],
        ),
        migrations.RenameField(
            model_name='ticket',
            old_name='ticket_course_id',
            new_name='ticket_inbox_id',
        ),
        migrations.RemoveField(
            model_name='label',
            name='course',
        ),
        migrations.RemoveField(
            model_name='user',
            name='courses',
        ),
        migrations.DeleteModel(
            name='UserCourseRelationship',
        ),
        migrations.AddField(
            model_name='userinbox',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbox_relationship', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='label',
            name='inbox',
            field=models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='ticketvise.Inbox'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='ticket',
            name='inbox',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='ticketvise.Inbox'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='user',
            name='inboxes',
            field=models.ManyToManyField(related_name='users', through='ticketvise.UserInbox', to='ticketvise.Inbox'),
        ),
        migrations.AlterUniqueTogether(
            name='ticket',
            unique_together={('ticket_inbox_id', 'inbox')},
        ),
        migrations.AlterUniqueTogether(
            name='userinbox',
            unique_together={('user', 'inbox')},
        ),
        migrations.RemoveField(
            model_name='ticket',
            name='course',
        ),
        migrations.DeleteModel(
            name='Course',
        ),
    ]
