version: '3.7'

services:
  database:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    environment:
      - POSTGRES_DB=ticketvise
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}

  web:
    image: docker.pkg.github.com/ticketvise/ticketvise/backend:develop
    command: >
      sh -c "python manage.py wait_for_database &&
             python manage.py migrate --no-input &&
             python manage.py insert_demo_data &&
             gunicorn ticketvise.wsgi:application --bind 0.0.0.0:6000"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    volumes:
      - media:/backend/ticketvise/media
      - static:/backend/ticketvise/static
    environment:
      - DEBUG=0
      - DJANGO_SECRET=${DJANGO_SECRET}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - LTI_KEY=${LTI_KEY}
      - LTI_SECRET=${LTI_SECRET}

  proxy:
    image: docker.pkg.github.com/ticketvise/ticketvise/proxy:develop
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    ports:
      - 80:8080
      - 443:8443
    volumes:
      - media:/home/media:ro
      - static:/home/static:ro
      - cert_conf:/etc/letsencrypt
      - cert_www:/var/www/certbot

  certbot:
    image: certbot/certbot
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    volumes:
      - cert_conf:/etc/letsencrypt
      - cert_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  cert_conf:
  cert_www: