version: "3.7"

services:
  database:
    hostname: database
    image: postgres:12-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    environment:
      POSTGRES_DB: ticketvise
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}

  web:
    image: "ticketvise/backend:sha-${GIT_DIGEST}"
    command: >
      sh -c "python manage.py wait_for_database &&
             python manage.py configure_s3 &&
             python manage.py migrate --no-input &&
             python manage.py collectstatic --no-input --clear &&
             gunicorn ticketvise.wsgi:application --bind 0.0.0.0:6000"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    environment:
      DEBUG: 0
      SEND_MAIL: 1
      DJANGO_SECRET: ${DJANGO_SECRET}
      SMTP_OUTBOUND_PASSWORD: ${EMAIL_PASSWORD}
      SQL_HOST: database
      SQL_DATABASE: ticketvise
      SQL_ENGINE: django.db.backends
      SQL_USER: ${SQL_USER}
      SQL_PASSWORD: ${SQL_PASSWORD}
      LTI_KEY: ${LTI_KEY}
      LTI_SECRET: ${LTI_SECRET}
      DOMAIN: ${DOMAIN}
      HOST: ${DOMAIN}
      S3_USE_HTTPS: 0
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET}

  frontend:
    image: "ticketvise/frontend:sha-${GIT_DIGEST}"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s

  proxy:
    image: "ticketvise/proxy:sha-${GIT_DIGEST}"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    environment:
      NGINX_DOMAIN: ${DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - cert_conf:/etc/letsencrypt
      - cert_www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  s3:
    image: minio/minio:latest
    volumes:
      - minio_data:/data
    entrypoint: sh
    command: -c 'mkdir -p /data/$$S3_BUCKET_NAME && minio server /data --console-address ":9001"'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    environment:
      MINIO_ROOT_USER:  ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    # healthcheck:
    #   test: [ "CMD", "curl", "-f", ${MINIO_ENDPOINT_URL}"/minio/health/live" ]
    #   interval: 30s
    #   timeout: 20s
    #   retries: 3

  certbot:
    image: certbot/certbot:v1.18.0
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 10s
    volumes:
      - cert_conf:/etc/letsencrypt
      - cert_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  cert_conf:
  cert_www:
  postgres_data:
  minio_data:
